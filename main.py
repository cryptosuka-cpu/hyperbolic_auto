import time
import requests
import logging
from itertools import cycle

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
API_KEYS_FILE = "api_keys.txt"
PROXIES_FILE = "proxies.txt"
QUESTIONS_FILE = "questions.txt"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Hyperbolic
HYPERBOLIC_API_URL = "https://api.hyperbolic.xyz/v1/chat/completions"
MODEL = "meta-llama/Meta-Llama-3.1-8B-Instruct"
MAX_TOKENS = 2048
TEMPERATURE = 0.7
TOP_P = 0.9
DELAY_BETWEEN_QUESTIONS = 15  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ API-–∫–ª—é—á–µ–π
def load_api_keys(filename: str) -> list:
    try:
        with open(filename, "r", encoding="utf-8") as f:
            keys = [line.strip() for line in f if line.strip()]
        if not keys:
            raise ValueError("–§–∞–π–ª API-–∫–ª—é—á–µ–π –ø—É—Å—Ç.")
        return keys
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API-–∫–ª—é—á–µ–π –∏–∑ {filename}: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏
def load_proxies(filename: str) -> list:
    try:
        with open(filename, "r", encoding="utf-8") as f:
            proxies = [line.strip() for line in f if line.strip()]
        if not proxies:
            logger.warning("–§–∞–π–ª –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é.")
        return proxies
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ {filename}: {e}")
        return []

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏ –ø—Ä–æ–∫—Å–∏
api_keys = load_api_keys(API_KEYS_FILE)
proxies = load_proxies(PROXIES_FILE)

if not api_keys:
    logger.error("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã API-–∫–ª—é—á–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª api_keys.txt")
    exit(1)

# –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª—ã –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ API-–∫–ª—é—á–∞–º –∏ –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
api_cycle = cycle(enumerate(api_keys, 1))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º enumerate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
proxy_cycle = cycle(enumerate(proxies, 1)) if proxies else None  # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–∫—Å–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–¥–µ–∫—Å –∏ —Å–∞–º –ø—Ä–æ–∫—Å–∏

def send_request(question: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, –∏–Ω–∞—á–µ False."""
    api_index, api_key = next(api_cycle)  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π API-–∫–ª—é—á —Å –µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–º
    proxy_index, proxy_url = next(proxy_cycle) if proxy_cycle else (None, None)  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    data = {
        "messages": [{"role": "user", "content": question}],
        "model": MODEL,
        "max_tokens": MAX_TOKENS,
        "temperature": TEMPERATURE,
        "top_p": TOP_P
    }

    proxies_dict = {"http": proxy_url, "https": proxy_url} if proxy_url else None

    # –í –ª–æ–≥–∞—Ö –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–º–µ—Ä API-–∫–ª—é—á–∞ –≤–º–µ—Å—Ç–æ —Å–∞–º–æ–≥–æ –∫–ª—é—á–∞
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API-–∫–ª—é—á #{api_index} | –ü—Ä–æ–∫—Å–∏ #{proxy_index if proxy_url else '–ù–µ—Ç'}")

    try:
        response = requests.post(HYPERBOLIC_API_URL, headers=headers, json=data, timeout=30, proxies=proxies_dict)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            questions = [line.strip() for line in f if line.strip()]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {QUESTIONS_FILE}: {e}")
        return

    if not questions:
        logger.error(f"–í —Ñ–∞–π–ª–µ {QUESTIONS_FILE} –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    index = 0
    while True:
        question = questions[index]
        logger.info(f"üìå –í–æ–ø—Ä–æ—Å #{index+1}: {question}")
        send_request(question)
        index = (index + 1) % len(questions)
        time.sleep(DELAY_BETWEEN_QUESTIONS)

if __name__ == "__main__":
    main()
